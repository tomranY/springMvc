<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.wolfcode.rbac.mapper.EmployeeMapper">
    <resultMap id="BaseResultMap" type="cn.wolfcode.rbac.domain.Employee">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="password" property="password"/>
        <result column="email" property="email"/>
        <result column="age" property="age"/>
        <result column="admin" property="admin"/>
        <!--部门与员工一对多关系-->
        <association property="dept" javaType="Department" columnPrefix="d_">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
            <result column="sn" property="sn"/>
        </association>
        <!--分部查询 角色与员工多对多关系-->
        <collection property="roles" column="id"
                    select="cn.wolfcode.rbac.mapper.EmployeeMapper.selectRolesByEmployeeById">
        </collection>
    </resultMap>
    <!--添加员工-->
    <insert id="addEmployee" keyProperty="id" useGeneratedKeys="true">
        insert into employee (name, password, email, age, admin, dept_id)
        values (#{name}, #{password}, #{email}, #{age}, #{admin}, #{dept.id})
    </insert>
    <!--维护角色关系表-->
    <insert id="insertRelation">
        insert into employee_role (employee_id, role_id) values
        <foreach collection="roleIds" item="roleId" separator=",">
            (#{employeeId},#{roleId})
        </foreach>
    </insert>
    <!--删除与角色关系-->
    <delete id="deleteRelation">
        delete from employee_role
        where employee_id = #{id}
    </delete>
    <!--删除员工-->
    <delete id="deleteEmployee">
        delete from employee
        where id = #{id}
    </delete>
    <!--删除员工与角色的关系-->
    <delete id="deleteRoleIds">
        delete from employee_role
        where role_id in (
            <foreach collection="roleIds" item="roleId" separator=",">
                #{roleId}
            </foreach>
            )
        and employee_id = #{employeeId}
    </delete>
    <!--更新数据-->
    <update id="updateEmployeeById">
        update employee
        set name = #{name},email = #{email},age = #{age},admin = #{admin},dept_id = #{dept.id}
        where id = #{id}
    </update>
    <!--查询所有-->
    <select id="selectAll" resultMap="BaseResultMap">
        select
            e.id, e.name, e.password, e.email, e.age, e.admin,
            d.id d_id, d.name d_name, d.sn d_sn
        from employee e left join department d on e.dept_id = d.id
    </select>
    <!--查询一个-->
    <select id="selectOne" resultMap="BaseResultMap">
        select
            e.id,e.name,e.password,e.email,e.age,e.admin,
            d.id   d_id,d.name d_name,d.sn d_sn
        from employee e left join department d on e.dept_id = d.id
        where e.id = #{id}
    </select>
    <!--模糊查询-->
    <sql id="base_where">
        <where>
            <if test="keyword != null">
                and (e.name like concat("%",#{keyword} ,"%") or e.email like concat("%",#{keyword} ,"%"))
            </if>
            <if test="deptId > 0">
                and e.dept_id = #{deptId}
            </if>
        </where>
    </sql>
    <!--模糊查询-->
    <select id="selectForList" resultMap="BaseResultMap">
        select
        e.id, e.name, e.password, e.email, e.age, e.admin,
        d.id d_id, d.name d_name, d.sn d_sn
        from employee e LEFT JOIN department d on e.dept_id = d.id
        <include refid="base_where"/>
    </select>
    <!--根据员工id查询所有角色信息-->
    <select id="selectRolesByEmployeeById" resultType="cn.wolfcode.rbac.domain.Role">
        select r.id, r.name, r.sn
        from role r left join
        employee_role er on r.id = er.role_id where er.employee_id = #{id}
    </select>
    <select id="selectRoleIdsByEmployeeById" resultType="java.lang.Long">
        select role_id from employee_role
        where employee_id = #{id}
    </select>
    <select id="selectIdentity" resultType="java.lang.Boolean">
        select admin from employee
        where name = #{username} and password = #{password}
    </select>

</mapper>